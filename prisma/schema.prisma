// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model FoodType {
    id               Int               @id @default(autoincrement())
    name             String
    mkName           String
    profileFoodTypes ProfileFoodType[]
}

model ProfileFoodType {
    profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    foodType   FoodType @relation(fields: [foodTypeId], references: [id], onDelete: Cascade)
    profileId  Int
    foodTypeId Int

    @@id([profileId, foodTypeId])
}

model Drink {
    id            Int            @id @default(autoincrement())
    name          String
    mkName        String
    profiledrinks ProfileDrink[]
}

model ProfileDrink {
    profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
    drink     Drink   @relation(fields: [drinkId], references: [id], onDelete: Cascade)
    profileId Int
    drinkId   Int

    @@id([profileId, drinkId])
}

model Language {
    id               Int                @id @default(autoincrement())
    name             String
    mkName           String             @default("")
    ProfileLangugage ProfileLangugage[]
}

model ProfileLangugage {
    profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
    language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade)
    profileId  Int
    languageId Int

    @@id([profileId, languageId])
}

model Address {
    id               Int     @id @default(autoincrement())
    street           String
    city             String
    streetNumber     String
    state            String
    country          String
    formattedAddress String
    postalCode       String
    latitude         Float
    longitude        Float
    profileId        Int     @unique
    profile          Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum ProfileStatus {
    PENDING
    APPROVED
    REJECTED
}

enum ReservationStatus {
    PENDING
    ACCEPTED
    APPROVED
    REJECTED
}

model Profile {
    id               Int                @id @default(autoincrement())
    familyName       String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    dateOfBirth      DateTime
    createdBy        User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById      String             @unique
    photoUrl         String
    title            String
    description      String
    status           ProfileStatus      @default(PENDING)
    rejectedInfo     String?
    maximumPeople    Int
    isSmoking        Boolean
    neighbourhood    String
    profileLanguages ProfileLangugage[]
    profileDrinks    ProfileDrink[]
    profileFoodTypes ProfileFoodType[]
    address          Address?
    reservations     Reservation[]
}

model Reservation {
    id          Int                 @id @default(autoincrement())
    firstName   String
    lastName    String
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
    note        String
    date        DateTime
    country     String
    email       String
    phoneNumber String
    profile     Profile             @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId   Int
    status      ReservationStatus   @default(PENDING)
    people      ReservationPerson[]
    paymentLink String?
}

model ReservationPerson {
    id            Int         @id @default(autoincrement())
    age           Int
    reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
    reservationId Int
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id       String    @id @default(cuid())
    name     String?
    email    String?   @unique
    image    String?
    accounts Account[]
    sessions Session[]
    posts    Post[]
    Profile  Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
